# PostSync CI/CD Pipeline
# Continuous Integration and Deployment for PostSync

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  # Container registry
  REGISTRY: gcr.io
  PROJECT_ID: postsync-prod
  SERVICE_NAME: postsync-api
  REGION: us-central1

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov black flake8 isort mypy

      - name: Code formatting check (Black)
        run: black --check src/ tests/

      - name: Import sorting check (isort)
        run: isort --check-only src/ tests/

      - name: Linting (flake8)
        run: flake8 src/ tests/

      - name: Type checking (mypy)
        run: mypy src/

      - name: Run tests with coverage
        env:
          ENVIRONMENT: test
          SECRET_KEY: test-secret-key
          REDIS_URL: redis://localhost:6379/0
          GEMINI_API_KEY: test-key
          REDDIT_CLIENT_ID: test-id
          REDDIT_CLIENT_SECRET: test-secret
          LINKEDIN_CLIENT_ID: test-id
          LINKEDIN_CLIENT_SECRET: test-secret
          TWITTER_API_KEY: test-key
          TWITTER_API_SECRET: test-secret
          TWITTER_BEARER_TOKEN: test-token
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Security audit (Safety)
        run: safety check -r requirements.txt

      - name: Security linting (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Static analysis (Semgrep)
        run: |
          python -m semgrep --config=auto src/ --json --output=semgrep-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            semgrep-report.json

  # Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image ${{ needs.build.outputs.image-tag }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars ENVIRONMENT=staging \
            --set-env-vars DEBUG=false \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --concurrency 100 \
            --timeout 300

      - name: Get staging URL
        id: staging-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Run health check
        run: |
          sleep 30
          curl -f ${{ steps.staging-url.outputs.url }}/health

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Deployed to staging: ${{ steps.staging-url.outputs.url }}'
            })

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Cloud Run (Production)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ needs.build.outputs.image-tag }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars ENVIRONMENT=production \
            --set-env-vars DEBUG=false \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 100 \
            --concurrency 100 \
            --timeout 300

      - name: Get production URL
        id: production-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Run health check
        run: |
          sleep 30
          curl -f ${{ steps.production-url.outputs.url }}/health

      - name: Update traffic to new revision
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-latest

  # Database Migration (if needed)
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Run database migrations
        env:
          ENVIRONMENT: production
          GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
        run: |
          python scripts/migrate.py

  # Notify on deployment
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, migrate]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'release')

    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ PostSync deployed successfully to production!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ PostSync deployment failed!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}