# Security Workflow for PostSync
# Additional security checks and vulnerability scanning

name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
    paths:
      - 'requirements.txt'
      - 'src/**'
  workflow_dispatch:

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Safety check
        run: |
          safety check -r requirements.txt --json --output safety-report.json
        continue-on-error: true

      - name: Pip audit
        run: |
          pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Code security analysis
  code-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep

      - name: Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-security-report.json
        continue-on-error: true

      - name: Semgrep security scan
        run: |
          python -m semgrep --config=auto src/ --json --output=semgrep-security-report.json
        continue-on-error: true

      - name: Upload security scan reports
        uses: actions/upload-artifact@v3
        with:
          name: code-security-reports
          path: |
            bandit-security-report.json
            semgrep-security-report.json

  # Docker image security scanning
  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: postsync:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'postsync:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan for secrets
        run: |
          trufflehog git file://. --json --output=trufflehog-report.json
        continue-on-error: true

      - name: Upload secret scan report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secret-scan-report
          path: trufflehog-report.json

  # License compliance check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip install -r requirements.txt
          pip-licenses --format=json --output-file=licenses-report.json

      - name: Validate license compliance
        run: |
          python -c "
          import json
          
          # Load license report
          with open('licenses-report.json', 'r') as f:
              licenses = json.load(f)
          
          # Define allowed licenses
          allowed_licenses = [
              'MIT', 'BSD', 'BSD-3-Clause', 'BSD-2-Clause',
              'Apache', 'Apache 2.0', 'Apache-2.0',
              'ISC', 'Mozilla Public License 2.0 (MPL 2.0)',
              'Python Software Foundation', 'PSF'
          ]
          
          # Check for non-compliant licenses
          violations = []
          for pkg in licenses:
              license_name = pkg.get('License', '').strip()
              if license_name and license_name not in allowed_licenses:
                  violations.append(f\"{pkg['Name']}: {license_name}\")
          
          if violations:
              print('License violations found:')
              for violation in violations:
                  print(f'  - {violation}')
              exit(1)
          else:
              print('All licenses are compliant')
          "

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses-report.json

  # Consolidate and report results
  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, license-check]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check if artifact directories exist and have content
          if [ -d "vulnerability-reports" ] && [ "$(ls -A vulnerability-reports)" ]; then
            echo "✅ Dependency vulnerability scan completed" >> security-summary.md
          else
            echo "❌ Dependency vulnerability scan failed or no results" >> security-summary.md
          fi
          
          if [ -d "code-security-reports" ] && [ "$(ls -A code-security-reports)" ]; then
            echo "✅ Code security analysis completed" >> security-summary.md
          else
            echo "❌ Code security analysis failed or no results" >> security-summary.md
          fi
          
          if [ -d "secret-scan-report" ] && [ "$(ls -A secret-scan-report)" ]; then
            echo "✅ Secret scanning completed" >> security-summary.md
          else
            echo "❌ Secret scanning failed or no results" >> security-summary.md
          fi
          
          if [ -d "license-report" ] && [ "$(ls -A license-report)" ]; then
            echo "✅ License compliance check completed" >> security-summary.md
          else
            echo "❌ License compliance check failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Notify on critical vulnerabilities
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Critical security vulnerabilities detected in PostSync!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}