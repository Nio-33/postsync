# PostSync Docker Compose Configuration
# For local development and testing

version: '3.8'

services:
  # Main PostSync API service
  postsync-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      
      # Database settings
      - FIRESTORE_DATABASE_ID=(default)
      
      # API credentials (from .env file)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      
      # Redis connection
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
      - ./service-account.json:/app/service-account.json:ro
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - postsync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - postsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy with frontend static files
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend:/usr/share/nginx/html/frontend:ro
    depends_on:
      - postsync-api
    restart: unless-stopped
    networks:
      - postsync-network
    profiles:
      - with-nginx

  # PostgreSQL (alternative to Firestore for local development)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=postsync
      - POSTGRES_USER=postsync
      - POSTGRES_PASSWORD=postsync_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - postsync-network
    profiles:
      - with-postgres

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  postsync-network:
    driver: bridge